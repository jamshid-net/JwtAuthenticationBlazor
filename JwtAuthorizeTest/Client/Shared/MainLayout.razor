@using Blazored.LocalStorage;
@using JwtAuthorizeTest.Client.Pages;
@using JwtAuthorizeTest.Shared;
@using Microsoft.AspNetCore.Components.Authorization;
@inject ILocalStorageService LocalStorage;
@inject HttpClient HttpClient;
@inject AuthenticationStateProvider AuthStateProvider;
@inherits LayoutComponentBase
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <button @onclick="LogoutAsync" class="btn btn-dark">Logout</button>

        </div>

        <ErrorBoundary @ref="errorBoundary">
            <ChildContent>
                <article class="content px-4">
                    @Body
                </article>
            </ChildContent>
           
        </ErrorBoundary>


    </main>
</div>
@code {


    private ErrorBoundary? errorBoundary;
    
    protected override void OnInitialized()
    {
        TaskScheduler.UnobservedTaskException += async (sender, e) =>
        {
             await LogoutAsync();
            e.SetObserved();
        };
    }

    public async Task LogoutAsync()
    {
        await LocalStorage.RemoveItemAsync("token");

        var refreshtoken = await LocalStorage.GetItemAsStringAsync("refreshtoken");
        await HttpClient.PostAsJsonAsync<string>("api/Account/logout", refreshtoken);

        await LocalStorage.RemoveItemAsync("refreshtoken");

        await AuthStateProvider.GetAuthenticationStateAsync();
        await InvokeAsync(StateHasChanged);
    }




}
