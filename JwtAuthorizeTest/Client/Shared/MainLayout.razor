@using Blazored.LocalStorage;
@using JwtAuthorizeTest.Shared;
@using Microsoft.AspNetCore.Components.Authorization;
@inject ILocalStorageService LocalStorage;
@inject HttpClient HttpClient;
@inject AuthenticationStateProvider AuthStateProvider;
@inherits LayoutComponentBase
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <button @onclick="LogoutAsync" class="btn btn-dark">Logout</button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
@code{
    public async Task LogoutAsync()
    {
        await LocalStorage.RemoveItemAsync("token");

        var refreshtoken = await LocalStorage.GetItemAsStringAsync("refreshtoken");
        await HttpClient.PostAsJsonAsync<string>("api/Account/logout", refreshtoken);

        await LocalStorage.RemoveItemAsync("refreshtoken");

        await AuthStateProvider.GetAuthenticationStateAsync();
    }
    protected async override Task OnInitializedAsync()
    {
       
        var refreshtoken= await LocalStorage.GetItemAsStringAsync("refreshtoken");
        var accsesstoken = await LocalStorage.GetItemAsStringAsync("token");
        var tokenresponse = new TokenResponse
            {
                AccessToken = accsesstoken,
                RefreshToken = refreshtoken
            };
        //var response = await HttpClient.PostAsJsonAsync<TokenResponse>("api/Account/refreshtoken", tokenresponse);
        //if (response.IsSuccessStatusCode)
        //{
        //    var tokenResponse =await response.Content.ReadFromJsonAsync<TokenResponse>();
        //    await LocalStorage.SetItemAsStringAsync("token", tokenResponse.AccessToken);
        //    await LocalStorage.SetItemAsStringAsync("refreshtoken", tokenResponse.RefreshToken);
        //    await AuthStateProvider.GetAuthenticationStateAsync();
        //}

    }


}
