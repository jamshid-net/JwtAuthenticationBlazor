@page "/register"
@using Blazored.LocalStorage;
@using JwtAuthorizeTest.Shared.DTOs;
@using JwtAuthorizeTest.Shared;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Net.Http.Headers;
@inject HttpClient HttpClient;
@inject ILocalStorageService LocalStorage;
@inject AuthenticationStateProvider AuthStateProvider;

<h3>Register</h3>
@if (Flag)
{
    <div class="alert alert-success" role="alert">
        Successfully registered!
    </div>


}
<div class="container">
    <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
        <div class="card-body">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <p class="text-danger">@errorMessage</p>
            }
            <div class="form-group mb-2">
                <label>User name:</label>
                <InputText @bind-Value="RegisterModel.UserName" class="form-control" DisplayName="Username" />
                <ValidationMessage For="() => RegisterModel.UserName" />
            </div>
            <div class="form-group mb-2">
                <label>Password:</label>
                <InputText type="password" @bind-Value="RegisterModel.Password" class="form-control" DisplayName="Password" />
                <ValidationMessage For="() => RegisterModel.Password" />
            </div>
            <div class="form-group mb-2">
                <label>Confirm password:</label>
                <InputText type="password"  @bind-Value="RegisterModel.ConfirmPassword" class="form-control" DisplayName="ConfirmPassword" />
                <ValidationMessage For="() => RegisterModel.ConfirmPassword" />
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
    </EditForm>

</div>
@code{

    public RegisterDto RegisterModel { get; set; } = new();
    private bool Flag { get; set; } = false;
    public string errorMessage = null;

    public async Task RegisterAsync()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync<RegisterDto>("api/Account/register", RegisterModel);
            if (response.IsSuccessStatusCode)
            {
                var tokenresponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
                await LocalStorage.SetItemAsStringAsync("token", tokenresponse.AccessToken);
                await LocalStorage.SetItemAsStringAsync("refreshtoken", tokenresponse.RefreshToken);
                await AuthStateProvider.GetAuthenticationStateAsync();
                Flag = true;

            }
            else
                errorMessage = await response.Content.ReadAsStringAsync();


    }
        catch (Exception ex)
        {

            errorMessage = ex.Message;
        }
    }

}